# amazon assumes you have aws plugin `vagrant plugin install vagrant-aws`
# run this on amazon with `vagrant up aws --provider aws`

Vagrant.configure(2) do |all|




    all.vm.define "aws",  primary: true do |config|
        config.vm.box = "lergo-system-tests"
        config.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"
        config.vm.provider :aws do |aws, override|
            aws.access_key_id = ENV['VAGRANT_AWS_KEY']
            aws.secret_access_key = ENV['VAGRANT_AWS_ACCESS_KEY']
            aws.keypair_name = ENV['VAGRANT_KEYPAIR']

            aws.region = ENV['VAGRANT_REGION']
            aws.instance_type = ENV['VAGRANT_INSTANCE_TYPE']

            aws.ami = ENV['VAGRANT_AMI'] # ubuntu-ireland
            # aws.ami = 'ami-d05e75b8' # ubuntu-us

            aws.tags = {
               'Name' => 'vagrant-system-tests'
            }

            aws.security_groups = ENV['VAGRANT_SECURITY_GROUP']
            aws.associate_public_ip = true
            aws.subnet_id = ENV['VAGRANT_SUBNET_ID']
            # aws.security_groups = ENV['vagrant-security-group']


            override.ssh.username = 'ubuntu'
            override.ssh.private_key_path = ENV['VAGRANT_KEY_FILE']
            # http://stackoverflow.com/questions/33098913/vagrant-fails-to-get-machine-up-throwing-keep-getting-an-error-prompt-undef?noredirect=1#comment54025480_33098913
            override.ssh.insert_key = false
        end

    end

     all.vm.define "virtualbox" do |config|
        config.vm.box = "ubuntu/trusty64"

        config.vm.network "forwarded_port", guest: 1616, host: 1616

        config.vm.provider "virtualbox" do |v|
            v.memory = 4096
            v.cpus = 4
            v.name="lergo-system-tests"
        end
     end


    all.vm.synced_folder "./synced_folder", "/vagrant", type: "rsync"

    all.vm.provision "shell", inline: <<-SHELL
      OUTPUT_FILE="/vagrant/environment.sh"
      echo -n                                                       >  $OUTPUT_FILE
      echo 'export BUILD_NUMBER="#{ENV['TEST_BUILD_NUMBER']}"'          >> $OUTPUT_FILE
      echo 'export MANDRILL_API_KEY="#{ENV['MANDRILL_API_KEY']}"'          >> $OUTPUT_FILE
      echo 'export MANDRILL_TO_EMAILS="#{ENV['MANDRILL_TO_EMAILS']}"'      >> $OUTPUT_FILE
    SHELL

    all.vm.provision "shell" do |s|
        s.path = "./provision.sh"
        s.privileged = false
    end
end
