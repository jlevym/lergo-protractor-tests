{
  "name": "jenkins-api",
  "version": "0.2.7",
  "description": "Jenkins API written in Node.js",
  "author": {
    "name": "Shawn Jansepar",
    "email": "shawnjan@gmail.com"
  },
  "dependencies": {
    "request": ">= 2.2.9"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:jansepar/node-jenkins-api.git"
  },
  "keywords": [
    "github",
    "jenkins"
  ],
  "engine": {
    "node": ">=0.4"
  },
  "main": "./lib/main.js",
  "readme": "nodejs-jenkins-api\n=================\n\n## Install\n\n<pre>\nnpm install jenkins-api\n</pre>\n\n## Usage\n\n### setup\n\n```javascript\nvar jenkinsapi = require('jenkins-api');\n\n// no auth\nvar jenkins = jenkinsapi.init(\"http://jenkins.yoursite.com\");\n\n// username/password\nvar jenkins = jenkinsapi.init(\"http://username:password@jenkins.yoursite.com\");\n\n// API Token\nvar jenkins = jenkinsapi.init('https://username:token@jenkins.company.com');\n\n```\n\n### all jobs\n\n```javascript\njenkins.all_jobs(function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n### job info\n\n```javascript\njenkins.job_info('job-in-jenkins', function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n### enable job\n\n```javascript\njenkins.enable_job('job-in-jenkins', function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n### disable job\n\n```javascript\njenkins.disable_job('job-in-jenkins', function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n### build\n\n```javascript\njenkins.build('job-in-jenkins', function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n### stop build\n\n```javascript\njenkins.stop_build('job-in-jenkins', 'build-number',function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n\n### build with params\n\n```javascript\njenkins.build('job-in-jenkins', {key: 'value'}, function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n### build info\n\n```javascript\njenkins.build_info('job-in-jenkins', 'build-number', function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n### last build info\n\n```javascript\njenkins.last_build_info('job-in-jenkins', function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n### last build report\n\n```javascript\njenkins.last_build_report('job-in-jenkins', function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n### get config xml\n\n```javascript\njenkins.get_config_xml('job-in-jenkins', function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n### copy job\n\n```javascript\njenkins.copy_job('job-to-copy'\n                ,'new-job-title'\n                ,function(config) {\n                    // function which takes the config.xml, and returns\n                    // the new config xml for the new job\n                    return config.replace('development','feature-branch');\n                }\n                ,function(err, data) {\n                      // if no error, job was copied\n                      if (err){ return console.log(err); }\n                      console.log(data)\n                });\n```\n\n### delete job\n\n```javascript\njenkins.delete_job('job-in-jenkins', function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n### last success\n\n```javascript\njenkins.last_success('job-in-jenkins', function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n### last result\n```javascript\njenkins.last_result('job-in-jenkins', function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n### job output\n```javascript\njenkins.job_output('job-in-jenkins', 'buildname', function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n### get all queued items\n```javascript\njenkins.queue(function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n### get all jenkins computers (aka workers)\n```javascript\njenkins.computers(function(err, data) {\n  if (err){ return console.log(err); }\n  console.log(data)\n});\n```\n\n## Default configuration\n\nYou can set the default configuration which will be use in all HTTP requests by calling init with the additional options parameter:\n\n```javascript\n// default request options\nvar jenkins = jenkinsapi.init(\"http://jenkins.yoursite.com\", {strictSSL: false});\n```\n\nSince node-jenkins-api uses [request/request](https://github.com/request/request) as HTTP client, please refer to the documentation for available options.\n\n## Notes\n\nModeled after the [Python Jenkins API](https://github.com/txels/autojenkins)\n\n\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jansepar/node-jenkins-api/issues"
  },
  "_id": "jenkins-api@0.2.7",
  "_from": "jenkins-api@"
}
